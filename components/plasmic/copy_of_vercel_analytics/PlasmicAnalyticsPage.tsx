// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: iqg5FKVqRnpt5mRWXzEUTy
// Component: SVMA0EAGaHP
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import HeaderLink from "../../HeaderLink"; // plasmic-import: UWJB2Ar9w-6vp/component
import AnalyticsPageContent from "../../AnalyticsPageContent"; // plasmic-import: 4o34z0-A3Cr0-W/component
import FooterLink from "../../FooterLink"; // plasmic-import: 6DdYh-ZzrDW2s/component
import Social from "../../Social"; // plasmic-import: io0qhXpvcujmk/component
import Status from "../../Status"; // plasmic-import: bNHexnLPptchK/component
import FooterExpando from "../../FooterExpando"; // plasmic-import: 5_G6sg__inCAa/component
import Separator from "../../Separator"; // plasmic-import: 2Z0w-3TeyDKh4/component

import { ScreenContext, ScreenValue } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: l49ipgPtkJOvrB/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";
import defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import projectcss from "./plasmic_copy_of_vercel_analytics.module.css"; // plasmic-import: iqg5FKVqRnpt5mRWXzEUTy/projectcss
import sty from "./PlasmicAnalyticsPage.module.css"; // plasmic-import: SVMA0EAGaHP/css

import VercelLogoIcon from "./icons/PlasmicIcon__VercelLogo"; // plasmic-import: _pNVn0iqvLa_-b/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: XoR6GKD1aVqDHN/icon

export type PlasmicAnalyticsPage__VariantMembers = {};
export type PlasmicAnalyticsPage__VariantsArgs = {};
type VariantPropType = keyof PlasmicAnalyticsPage__VariantsArgs;
export const PlasmicAnalyticsPage__VariantProps = new Array<VariantPropType>();

export type PlasmicAnalyticsPage__ArgsType = {
  children?: React.ReactNode;
};

type ArgPropType = keyof PlasmicAnalyticsPage__ArgsType;
export const PlasmicAnalyticsPage__ArgProps = new Array<ArgPropType>(
  "children"
);

export type PlasmicAnalyticsPage__OverridesType = {
  root?: p.Flex<"div">;
  news?: p.Flex<"div">;
  header?: p.Flex<"div">;
  analyticsPageContent?: p.Flex<typeof AnalyticsPageContent>;
  footer?: p.Flex<"div">;
};

export interface DefaultAnalyticsPageProps {
  children?: React.ReactNode;
  className?: string;
}

function PlasmicAnalyticsPage__RenderFunc(props: {
  variants: PlasmicAnalyticsPage__VariantsArgs;
  args: PlasmicAnalyticsPage__ArgsType;
  overrides: PlasmicAnalyticsPage__OverridesType;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  const globalVariants = ensureGlobalVariants({
    screen: React.useContext(ScreenContext)
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      {false ? (
        <img
          alt={""}
          className={classNames(defaultcss.img, sty.img__s0Wvl)}
          role={"img"}
          src={"/plasmic/copy_of_vercel_analytics/images/vercelcomAnalyticsLaptopWithMdpiScreenpng.png"}
        />
      ) : null}
      {false ? (
        <img
          alt={""}
          className={classNames(defaultcss.img, sty.img___83SsS)}
          role={"img"}
          src={"/plasmic/copy_of_vercel_analytics/images/vercelcomAnalyticsMotoG4Png.jpeg"}
        />
      ) : null}

      <div className={classNames(defaultcss.all, sty.box__zUaLw)}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"news"}
          data-plasmic-override={overrides.news}
          hasGap={true}
          className={classNames(defaultcss.all, sty.news)}
        >
          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.box__e2ZGn
            )}
          >
            {"$40M to Build the Next Web"}
          </div>

          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.box__b2Csn
            )}
          >
            {"Read ->"}
          </div>
        </p.Stack>

        <div
          data-plasmic-name={"header"}
          data-plasmic-override={overrides.header}
          className={classNames(defaultcss.all, sty.header)}
        >
          <VercelLogoIcon
            className={classNames(defaultcss.all, sty.svg__sBymN)}
            role={"img"}
          />

          {(hasVariant(globalVariants, "screen", "tablet") ? true : false) ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(defaultcss.all, sty.box___89MGo)}
            >
              <HeaderLink
                className={classNames("__wab_instance", sty.headerLink__fFgn)}
              />

              <HeaderLink
                className={classNames("__wab_instance", sty.headerLink__as1YZ)}
              >
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.box__vWywA
                  )}
                >
                  {"Analytics"}
                </div>
              </HeaderLink>

              <HeaderLink
                className={classNames("__wab_instance", sty.headerLink__c0Xxm)}
              >
                {"Pricing"}
              </HeaderLink>
            </p.Stack>
          ) : null}
          {(hasVariant(globalVariants, "screen", "tablet") ? true : false) ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(defaultcss.all, sty.box__n48Ux)}
            >
              <HeaderLink
                className={classNames("__wab_instance", sty.headerLink__yBTnp)}
              >
                {"Contact"}
              </HeaderLink>

              <HeaderLink
                className={classNames("__wab_instance", sty.headerLink___5DeaE)}
              >
                {"Login"}
              </HeaderLink>

              <HeaderLink
                className={classNames("__wab_instance", sty.headerLink__czaT4)}
              >
                <div className={classNames(defaultcss.all, sty.box__hyqJs)}>
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.box__zpTj0
                    )}
                  >
                    {"Sign up"}
                  </div>
                </div>
              </HeaderLink>
            </p.Stack>
          ) : null}
          {(hasVariant(globalVariants, "screen", "tablet") ? false : true) ? (
            <img
              alt={""}
              className={classNames(defaultcss.img, sty.img___77Ym6)}
              role={"img"}
              src={"/plasmic/copy_of_vercel_analytics/images/menu.png"}
            />
          ) : null}
        </div>

        <p.PlasmicSlot
          defaultContents={
            <AnalyticsPageContent
              data-plasmic-name={"analyticsPageContent"}
              data-plasmic-override={overrides.analyticsPageContent}
              className={classNames("__wab_instance", sty.analyticsPageContent)}
            />
          }
          value={args.children}
        />

        {true ? (
          <p.Stack
            as={"div"}
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            hasGap={true}
            className={classNames(defaultcss.all, sty.footer)}
          >
            {(hasVariant(globalVariants, "screen", "tablet") ? true : false) ? (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(defaultcss.all, sty.box__bceu0)}
              >
                <div className={classNames(defaultcss.all, sty.box__wGkNo)}>
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(defaultcss.all, sty.box__wrr0H)}
                  >
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.box__kLq9P
                      )}
                    >
                      {"Frameworks"}
                    </div>

                    <FooterLink
                      className={classNames(
                        "__wab_instance",
                        sty.footerLink__ilcFx
                      )}
                    >
                      {"Next.js"}
                    </FooterLink>

                    <FooterLink
                      className={classNames(
                        "__wab_instance",
                        sty.footerLink__qu9Pr
                      )}
                    >
                      {"Create React App"}
                    </FooterLink>

                    <FooterLink
                      className={classNames(
                        "__wab_instance",
                        sty.footerLink___9Vwoa
                      )}
                    >
                      {"Gatsby"}
                    </FooterLink>

                    <FooterLink
                      className={classNames(
                        "__wab_instance",
                        sty.footerLink__zA4F9
                      )}
                    >
                      {"Nuxt.js"}
                    </FooterLink>

                    <FooterLink
                      className={classNames(
                        "__wab_instance",
                        sty.footerLink__sgcQx
                      )}
                    >
                      {"Vue"}
                    </FooterLink>

                    <FooterLink
                      className={classNames(
                        "__wab_instance",
                        sty.footerLink__abpqC
                      )}
                    >
                      {"Angular"}
                    </FooterLink>

                    <FooterLink
                      className={classNames(
                        "__wab_instance",
                        sty.footerLink__nepPj
                      )}
                    >
                      {"More Frameworks"}
                    </FooterLink>
                  </p.Stack>

                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(defaultcss.all, sty.box__w8SCk)}
                  >
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.box__x7L7I
                      )}
                    >
                      {"Resources"}
                    </div>

                    <FooterLink
                      className={classNames(
                        "__wab_instance",
                        sty.footerLink__zjDe
                      )}
                    >
                      {"Documentation"}
                    </FooterLink>

                    <FooterLink
                      className={classNames(
                        "__wab_instance",
                        sty.footerLink__h4HCd
                      )}
                    >
                      {"Guides"}
                    </FooterLink>

                    <FooterLink
                      className={classNames(
                        "__wab_instance",
                        sty.footerLink__mgcif
                      )}
                    >
                      {"Knowledge"}
                    </FooterLink>

                    <FooterLink
                      className={classNames(
                        "__wab_instance",
                        sty.footerLink__fvPwt
                      )}
                    >
                      {"API Reference"}
                    </FooterLink>

                    <FooterLink
                      className={classNames(
                        "__wab_instance",
                        sty.footerLink__o1Fy3
                      )}
                    >
                      {"Blog"}
                    </FooterLink>

                    <FooterLink
                      className={classNames(
                        "__wab_instance",
                        sty.footerLink__zPxMy
                      )}
                    >
                      {"Changelog"}
                    </FooterLink>

                    <FooterLink
                      className={classNames(
                        "__wab_instance",
                        sty.footerLink__mF8J
                      )}
                    >
                      {"OSS"}
                    </FooterLink>

                    <FooterLink
                      className={classNames(
                        "__wab_instance",
                        sty.footerLink___5H4
                      )}
                    >
                      {"Command-Line"}
                    </FooterLink>

                    <FooterLink
                      className={classNames(
                        "__wab_instance",
                        sty.footerLink__tfn8
                      )}
                    >
                      {"Integrations"}
                    </FooterLink>

                    <FooterLink
                      className={classNames(
                        "__wab_instance",
                        sty.footerLink__zKr3O
                      )}
                    >
                      {"Partners"}
                    </FooterLink>

                    <FooterLink
                      className={classNames(
                        "__wab_instance",
                        sty.footerLink___9ZdTx
                      )}
                    >
                      {"Support"}
                    </FooterLink>
                  </p.Stack>

                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(defaultcss.all, sty.box__db4UL)}
                  >
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.box__cCkYg
                      )}
                    >
                      {"Company"}
                    </div>

                    <FooterLink
                      className={classNames(
                        "__wab_instance",
                        sty.footerLink___0FolO
                      )}
                    >
                      {"Home"}
                    </FooterLink>

                    <FooterLink
                      className={classNames(
                        "__wab_instance",
                        sty.footerLink___3XvE4
                      )}
                    >
                      {"About"}
                    </FooterLink>

                    <FooterLink
                      className={classNames(
                        "__wab_instance",
                        sty.footerLink___5BoLu
                      )}
                    >
                      {"Careers"}
                    </FooterLink>

                    <FooterLink
                      className={classNames(
                        "__wab_instance",
                        sty.footerLink__ocmoG
                      )}
                    >
                      {"Pricing"}
                    </FooterLink>

                    <FooterLink
                      className={classNames(
                        "__wab_instance",
                        sty.footerLink__hB8Xa
                      )}
                    >
                      {"Security"}
                    </FooterLink>

                    <FooterLink
                      className={classNames(
                        "__wab_instance",
                        sty.footerLink___2Fh6L
                      )}
                    >
                      {"Next.js Conf"}
                    </FooterLink>

                    <FooterLink
                      className={classNames(
                        "__wab_instance",
                        sty.footerLink__qkrwa
                      )}
                    >
                      {"Contact Us"}
                    </FooterLink>
                  </p.Stack>

                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(defaultcss.all, sty.box__dpEw)}
                  >
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.box__i9M2A
                      )}
                    >
                      {"Legal"}
                    </div>

                    <FooterLink
                      className={classNames(
                        "__wab_instance",
                        sty.footerLink__dL1Lr
                      )}
                    >
                      {"Privacy Policy"}
                    </FooterLink>

                    <FooterLink
                      className={classNames(
                        "__wab_instance",
                        sty.footerLink__cr6H9
                      )}
                    >
                      {"Terms of Service"}
                    </FooterLink>

                    <FooterLink
                      className={classNames(
                        "__wab_instance",
                        sty.footerLink__w6Hqq
                      )}
                    >
                      {"Trademark Policy"}
                    </FooterLink>

                    <FooterLink
                      className={classNames(
                        "__wab_instance",
                        sty.footerLink__kWxVj
                      )}
                    >
                      {"Inactivity Policy"}
                    </FooterLink>

                    <FooterLink
                      className={classNames(
                        "__wab_instance",
                        sty.footerLink__ccpps
                      )}
                    >
                      {"DPA"}
                    </FooterLink>

                    <FooterLink
                      className={classNames(
                        "__wab_instance",
                        sty.footerLink__ujgfF
                      )}
                    >
                      {"SLA"}
                    </FooterLink>
                  </p.Stack>
                </div>

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.box__wlzVm)}
                >
                  <VercelLogoIcon
                    className={classNames(defaultcss.all, sty.svg__izU52)}
                    role={"img"}
                  />

                  <div className={classNames(defaultcss.all, sty.box__nEt4D)}>
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.box__yweD
                      )}
                    >
                      {"Copyright © 2021 Vercel Inc. All rights reserved."}
                    </div>

                    <Social
                      className={classNames(
                        "__wab_instance",
                        sty.social__ybSaX
                      )}
                    />

                    <Status
                      className={classNames(
                        "__wab_instance",
                        sty.status___3IPb8
                      )}
                    />

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(defaultcss.all, sty.box___5OmnM)}
                    >
                      <div
                        className={classNames(
                          defaultcss.all,
                          defaultcss.__wab_text,
                          sty.box__eJnQk
                        )}
                      >
                        {"Light"}
                      </div>

                      <IconIcon
                        className={classNames(defaultcss.all, sty.svg__ansxe)}
                        role={"img"}
                      />
                    </p.Stack>
                  </div>
                </p.Stack>
              </p.Stack>
            ) : null}
            {(hasVariant(globalVariants, "screen", "tablet") ? false : true) ? (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(defaultcss.all, sty.box__sjIcC)}
              >
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.box__tnQv9)}
                >
                  <FooterExpando
                    className={classNames(
                      "__wab_instance",
                      sty.footerExpando__oBrvm
                    )}
                  >
                    {"Frameworks"}
                  </FooterExpando>

                  <Separator
                    className={classNames(
                      "__wab_instance",
                      sty.separator__tUz85
                    )}
                  />

                  <FooterExpando
                    className={classNames(
                      "__wab_instance",
                      sty.footerExpando__wyi1N
                    )}
                  >
                    {"Resources"}
                  </FooterExpando>

                  <Separator
                    className={classNames(
                      "__wab_instance",
                      sty.separator___6QzzM
                    )}
                  />

                  <FooterExpando
                    className={classNames(
                      "__wab_instance",
                      sty.footerExpando__oSeuy
                    )}
                  >
                    {"Company"}
                  </FooterExpando>

                  <Separator
                    className={classNames(
                      "__wab_instance",
                      sty.separator__bJtRl
                    )}
                  />

                  <FooterExpando
                    className={classNames(
                      "__wab_instance",
                      sty.footerExpando__rz4Wr
                    )}
                  >
                    {"Legal"}
                  </FooterExpando>
                </p.Stack>

                <VercelLogoIcon
                  className={classNames(defaultcss.all, sty.svg___8Av5W)}
                  role={"img"}
                />

                <Status
                  className={classNames("__wab_instance", sty.status__z5GN)}
                />

                <Social
                  className={classNames("__wab_instance", sty.social__y1Jcm)}
                />

                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.box___1FxBf
                  )}
                >
                  {"Copyright © 2021 Vercel Inc. All rights reserved."}
                </div>
              </p.Stack>
            ) : null}
          </p.Stack>
        ) : null}
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "news", "header", "analyticsPageContent", "footer"],
  news: ["news"],
  header: ["header"],
  analyticsPageContent: ["analyticsPageContent"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<
  T extends NodeNameType
> = typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  news: "div";
  header: "div";
  analyticsPageContent: typeof AnalyticsPageContent;
  footer: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAnalyticsPage__OverridesType,
  DescendantsType<T>
>;

type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAnalyticsPage__VariantsArgs;
    args?: PlasmicAnalyticsPage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAnalyticsPage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicAnalyticsPage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicAnalyticsPage__ArgProps,
      internalVariantPropNames: PlasmicAnalyticsPage__VariantProps
    });

    return PlasmicAnalyticsPage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAnalyticsPage";
  } else {
    func.displayName = `PlasmicAnalyticsPage.${nodeName}`;
  }
  return func;
}

export const PlasmicAnalyticsPage = Object.assign(
  // Top-level PlasmicAnalyticsPage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    news: makeNodeComponent("news"),
    header: makeNodeComponent("header"),
    analyticsPageContent: makeNodeComponent("analyticsPageContent"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicAnalyticsPage
    internalVariantProps: PlasmicAnalyticsPage__VariantProps,
    internalArgProps: PlasmicAnalyticsPage__ArgProps
  }
);

export default PlasmicAnalyticsPage;
/* prettier-ignore-end */
